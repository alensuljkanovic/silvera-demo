/**
    Use this file to implement business logic. This file will be preserved
    during next compilations.

    Generated by: silvera
    Date: 2020-10-18 13:59:19
*/

package com.silvera.Order.service.impl;

import java.util.Optional;
import org.springframework.stereotype.Service;
import com.silvera.Order.domain.model.*;
import com.silvera.Order.service.base.*;
import com.silvera.Order.repository.*;
import com.silvera.Order.messages.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;

import com.silvera.Order.service.dependencies.*;


@Service
public class OrderService implements IOrderService {



    @Autowired
    OrderRepository orderRepository;



    @Autowired
    UserClient userClient;

    @Autowired
    BookstoreClient bookstoreClient;


    @Autowired
    KafkaTemplate<String, com.silvera.Order.messages.ordermsggroup.OrderCreated> ordermsggroupOrderCreatedKafkaTemplate;
    @Autowired
    KafkaTemplate<String, com.silvera.Order.messages.ordermsggroup.OrderUpdated> ordermsggroupOrderUpdatedKafkaTemplate;
    @Autowired
    KafkaTemplate<String, com.silvera.Order.messages.ordermsggroup.OrderDeleted> ordermsggroupOrderDeletedKafkaTemplate;


    // Auto-generated CRUD methods

    @Override
    public Order createOrder(Order order){
        checkAndUpdate(order);
        orderRepository.save(order);

        com.silvera.Order.messages.ordermsggroup.OrderCreated msg = new com.silvera.Order.messages.ordermsggroup.OrderCreated();
        msg.setOrderId(order.getId());
        msg.setUserEmail(userClient.userEmail(order.getUser()));

        ordermsggroupOrderCreatedKafkaTemplate.send("EV_ORDER_CREATED_CHANNEL", msg);


        Optional<Order> opt = orderRepository.findById(order.getId());
        return opt.orElse(null);
    }


    @Override
    public Order updateOrder(java.lang.String id, Order orderUpdate){
        Optional<Order> opt = orderRepository.findById(id);
        Order entity = opt.orElseThrow(IllegalArgumentException::new);

        checkAndUpdate(orderUpdate);
        orderRepository.save(orderUpdate);

        com.silvera.Order.messages.ordermsggroup.OrderUpdated msg = new com.silvera.Order.messages.ordermsggroup.OrderUpdated();
        msg.setOrderId(order.getId());
        msg.setUserEmail(userClient.userEmail(orderUpdate.getUser()));
        ordermsggroupOrderUpdatedKafkaTemplate.send("EV_ORDER_UPDATED_CHANNEL", msg);


        return orderUpdate;
    }


    @Override
    public Order readOrder(java.lang.String id){
        Optional<Order> opt = orderRepository.findById(id);
        return opt.orElseThrow(IllegalArgumentException::new);
    }


    @Override
    public void deleteOrder(java.lang.String id){
        Optional<Order> opt = orderRepository.findById(id);
        Order entity = opt.orElseThrow(IllegalArgumentException::new);
        orderRepository.delete(entity);

        com.silvera.Order.messages.ordermsggroup.OrderDeleted msg = new com.silvera.Order.messages.ordermsggroup.OrderDeleted();
        msg.setOrderId(order.getId());
        msg.setUserEmail(userClient.userEmail(entity.getUser()));

        ordermsggroupOrderDeletedKafkaTemplate.send("EV_ORDER_DELETED_CHANNEL", msg);

    }


    private void checkAndUpdate(Order order){
        if(!userClient.userExist(order.getUser())){
            throw new IllegalArgumentException("User with username '" + order.getUser() + "' does not exist!");
        }

        double price = 0;
        for(OrderItem item : order.getItems()){
            if(!bookstoreClient.bookExists(item.getBookId())){
                throw new IllegalArgumentException("Book with ISBN '" + item.getBookId() + "' doesn't exist!");
            }

            price += bookstoreClient.bookPrice(item.getBookId()) * item.getAmount();
        }

        order.setPrice(price);
    }


    @Override
    public java.util.List<Order> listOrders() {
        return orderRepository.findAll();
    }



}